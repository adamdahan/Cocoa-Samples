//
//  PaintCode.swift
//  PaintCode
//
//  Created by Szabolcs Toth on 11/18/18.
//  Copyright Â© 2018 . All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import Cocoa

public class PaintCode : NSObject {

    //// Cache

    private struct Cache {
        static let fillColor: NSColor = NSColor(red: 0.91, green: 0.957, blue: 0.98, alpha: 1)
        static let fillColor2: NSColor = NSColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1)
        static let fillColor3: NSColor = NSColor(red: 1, green: 1, blue: 1, alpha: 1)
        static let fillColor4: NSColor = NSColor(red: 0.878, green: 0.878, blue: 0.878, alpha: 1)
        static let fillColor5: NSColor = NSColor(red: 0, green: 0.722, blue: 0.941, alpha: 1)
        static let strokeColor: NSColor = NSColor(red: 0.098, green: 0.094, blue: 0.086, alpha: 1)
        static let fillColor6: NSColor = NSColor(red: 0.098, green: 0.094, blue: 0.086, alpha: 1)
        static var imageOfOrigami: NSImage?
    }

    //// Colors

    @objc dynamic public class var fillColor: NSColor { return Cache.fillColor }
    @objc dynamic public class var fillColor2: NSColor { return Cache.fillColor2 }
    @objc dynamic public class var fillColor3: NSColor { return Cache.fillColor3 }
    @objc dynamic public class var fillColor4: NSColor { return Cache.fillColor4 }
    @objc dynamic public class var fillColor5: NSColor { return Cache.fillColor5 }
    @objc dynamic public class var strokeColor: NSColor { return Cache.strokeColor }
    @objc dynamic public class var fillColor6: NSColor { return Cache.fillColor6 }

    //// Drawing Methods

    @objc dynamic public class func drawOrigami(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 110, height: 115), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 110, height: 115), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 110, y: resizedFrame.height / 115)


        //// Image
        //// Oval Drawing
        let ovalPath = NSBezierPath(ovalIn: NSRect(x: 13.8, y: 15.49, width: 82.1, height: 82.1))
        PaintCode.fillColor.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 71.65, y: 78.98))
        bezierPath.curve(to: NSPoint(x: 72.02, y: 78.87), controlPoint1: NSPoint(x: 71.78, y: 78.98), controlPoint2: NSPoint(x: 71.91, y: 78.94))
        bezierPath.curve(to: NSPoint(x: 72.27, y: 78.6), controlPoint1: NSPoint(x: 72.13, y: 78.81), controlPoint2: NSPoint(x: 72.21, y: 78.71))
        bezierPath.curve(to: NSPoint(x: 72.33, y: 78.23), controlPoint1: NSPoint(x: 72.32, y: 78.48), controlPoint2: NSPoint(x: 72.34, y: 78.35))
        bezierPath.curve(to: NSPoint(x: 72.19, y: 77.88), controlPoint1: NSPoint(x: 72.32, y: 78.1), controlPoint2: NSPoint(x: 72.27, y: 77.98))
        bezierPath.line(to: NSPoint(x: 56.25, y: 58.07))
        bezierPath.line(to: NSPoint(x: 50.09, y: 50.4))
        bezierPath.line(to: NSPoint(x: 54.42, y: 78.98))
        bezierPath.line(to: NSPoint(x: 71.65, y: 78.98))
        bezierPath.close()
        PaintCode.fillColor2.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = NSBezierPath()
        bezier2Path.move(to: NSPoint(x: 53.98, y: 76.27))
        bezier2Path.line(to: NSPoint(x: 70.88, y: 76.27))
        bezier2Path.line(to: NSPoint(x: 72.19, y: 77.88))
        bezier2Path.curve(to: NSPoint(x: 72.33, y: 78.23), controlPoint1: NSPoint(x: 72.27, y: 77.98), controlPoint2: NSPoint(x: 72.32, y: 78.1))
        bezier2Path.curve(to: NSPoint(x: 72.27, y: 78.6), controlPoint1: NSPoint(x: 72.34, y: 78.35), controlPoint2: NSPoint(x: 72.32, y: 78.48))
        bezier2Path.curve(to: NSPoint(x: 72.02, y: 78.87), controlPoint1: NSPoint(x: 72.21, y: 78.71), controlPoint2: NSPoint(x: 72.13, y: 78.81))
        bezier2Path.curve(to: NSPoint(x: 71.65, y: 78.98), controlPoint1: NSPoint(x: 71.91, y: 78.94), controlPoint2: NSPoint(x: 71.78, y: 78.98))
        bezier2Path.line(to: NSPoint(x: 54.39, y: 78.98))
        bezier2Path.line(to: NSPoint(x: 53.98, y: 76.27))
        bezier2Path.close()
        PaintCode.fillColor3.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = NSBezierPath()
        bezier3Path.move(to: NSPoint(x: 68.32, y: 40.94))
        bezier3Path.line(to: NSPoint(x: 49.27, y: 49.4))
        bezier3Path.line(to: NSPoint(x: 56.25, y: 58.07))
        bezier3Path.line(to: NSPoint(x: 68.32, y: 40.94))
        bezier3Path.close()
        PaintCode.fillColor2.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = NSBezierPath()
        bezier4Path.move(to: NSPoint(x: 57.79, y: 55.87))
        bezier4Path.line(to: NSPoint(x: 75.61, y: 64.63))
        bezier4Path.curve(to: NSPoint(x: 75.89, y: 64.91), controlPoint1: NSPoint(x: 75.73, y: 64.69), controlPoint2: NSPoint(x: 75.83, y: 64.79))
        bezier4Path.curve(to: NSPoint(x: 75.98, y: 65.3), controlPoint1: NSPoint(x: 75.96, y: 65.03), controlPoint2: NSPoint(x: 75.99, y: 65.16))
        bezier4Path.curve(to: NSPoint(x: 75.83, y: 65.67), controlPoint1: NSPoint(x: 75.96, y: 65.43), controlPoint2: NSPoint(x: 75.91, y: 65.56))
        bezier4Path.curve(to: NSPoint(x: 75.51, y: 65.9), controlPoint1: NSPoint(x: 75.75, y: 65.77), controlPoint2: NSPoint(x: 75.63, y: 65.85))
        bezier4Path.line(to: NSPoint(x: 65.09, y: 69.06))
        bezier4Path.line(to: NSPoint(x: 56.25, y: 58.07))
        bezier4Path.line(to: NSPoint(x: 57.79, y: 55.87))
        bezier4Path.close()
        PaintCode.fillColor2.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = NSBezierPath()
        bezier5Path.move(to: NSPoint(x: 34.67, y: 70.82))
        bezier5Path.line(to: NSPoint(x: 47.12, y: 70.82))
        bezier5Path.line(to: NSPoint(x: 39.19, y: 61.48))
        bezier5Path.line(to: NSPoint(x: 34.67, y: 70.82))
        bezier5Path.close()
        PaintCode.fillColor2.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = NSBezierPath()
        bezier6Path.move(to: NSPoint(x: 35.66, y: 68.79))
        bezier6Path.line(to: NSPoint(x: 45.4, y: 68.79))
        bezier6Path.line(to: NSPoint(x: 47.12, y: 70.82))
        bezier6Path.line(to: NSPoint(x: 34.67, y: 70.82))
        bezier6Path.line(to: NSPoint(x: 35.66, y: 68.79))
        bezier6Path.close()
        PaintCode.fillColor3.setFill()
        bezier6Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = NSBezierPath()
        bezier7Path.move(to: NSPoint(x: 34.67, y: 70.82))
        bezier7Path.line(to: NSPoint(x: 30.41, y: 65.12))
        bezier7Path.curve(to: NSPoint(x: 30.28, y: 64.77), controlPoint1: NSPoint(x: 30.33, y: 65.02), controlPoint2: NSPoint(x: 30.29, y: 64.9))
        bezier7Path.curve(to: NSPoint(x: 30.35, y: 64.41), controlPoint1: NSPoint(x: 30.27, y: 64.65), controlPoint2: NSPoint(x: 30.29, y: 64.52))
        bezier7Path.curve(to: NSPoint(x: 30.6, y: 64.14), controlPoint1: NSPoint(x: 30.4, y: 64.29), controlPoint2: NSPoint(x: 30.49, y: 64.2))
        bezier7Path.curve(to: NSPoint(x: 30.95, y: 64.04), controlPoint1: NSPoint(x: 30.7, y: 64.07), controlPoint2: NSPoint(x: 30.83, y: 64.04))
        bezier7Path.line(to: NSPoint(x: 37.96, y: 64.04))
        bezier7Path.line(to: NSPoint(x: 34.67, y: 70.82))
        bezier7Path.close()
        PaintCode.fillColor4.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        let bezier8Path = NSBezierPath()
        bezier8Path.move(to: NSPoint(x: 63.55, y: 43.15))
        bezier8Path.line(to: NSPoint(x: 63.55, y: 37.31))
        bezier8Path.curve(to: NSPoint(x: 63.67, y: 36.92), controlPoint1: NSPoint(x: 63.55, y: 37.17), controlPoint2: NSPoint(x: 63.59, y: 37.03))
        bezier8Path.curve(to: NSPoint(x: 63.99, y: 36.67), controlPoint1: NSPoint(x: 63.75, y: 36.8), controlPoint2: NSPoint(x: 63.86, y: 36.72))
        bezier8Path.curve(to: NSPoint(x: 64.4, y: 36.64), controlPoint1: NSPoint(x: 64.12, y: 36.62), controlPoint2: NSPoint(x: 64.26, y: 36.61))
        bezier8Path.curve(to: NSPoint(x: 64.74, y: 36.86), controlPoint1: NSPoint(x: 64.53, y: 36.68), controlPoint2: NSPoint(x: 64.65, y: 36.75))
        bezier8Path.line(to: NSPoint(x: 68.31, y: 40.96))
        bezier8Path.line(to: NSPoint(x: 63.55, y: 43.15))
        bezier8Path.close()
        PaintCode.fillColor5.setFill()
        bezier8Path.fill()


        //// Bezier 9 Drawing
        let bezier9Path = NSBezierPath()
        bezier9Path.move(to: NSPoint(x: 65.09, y: 69.06))
        bezier9Path.line(to: NSPoint(x: 56.25, y: 58.07))
        bezier9Path.line(to: NSPoint(x: 57.79, y: 55.87))
        bezier9Path.line(to: NSPoint(x: 57.8, y: 55.88))
        bezier9Path.line(to: NSPoint(x: 67.76, y: 68.26))
        bezier9Path.line(to: NSPoint(x: 65.09, y: 69.06))
        bezier9Path.close()
        PaintCode.fillColor4.setFill()
        bezier9Path.fill()


        //// Bezier 10 Drawing
        let bezier10Path = NSBezierPath()
        bezier10Path.move(to: NSPoint(x: 51.71, y: 48.32))
        bezier10Path.line(to: NSPoint(x: 57.8, y: 55.87))
        bezier10Path.line(to: NSPoint(x: 56.25, y: 58.07))
        bezier10Path.line(to: NSPoint(x: 49.27, y: 49.4))
        bezier10Path.line(to: NSPoint(x: 51.71, y: 48.32))
        bezier10Path.close()
        PaintCode.fillColor4.setFill()
        bezier10Path.fill()


        //// Bezier 11 Drawing
        let bezier11Path = NSBezierPath()
        bezier11Path.move(to: NSPoint(x: 54.39, y: 78.98))
        bezier11Path.line(to: NSPoint(x: 50.07, y: 50.4))
        bezier11Path.line(to: NSPoint(x: 49.27, y: 49.4))
        bezier11Path.line(to: NSPoint(x: 43.87, y: 51.81))
        bezier11Path.line(to: NSPoint(x: 39.19, y: 61.48))
        bezier11Path.line(to: NSPoint(x: 47.12, y: 70.82))
        bezier11Path.line(to: NSPoint(x: 54.06, y: 78.98))
        bezier11Path.line(to: NSPoint(x: 54.39, y: 78.98))
        bezier11Path.close()
        PaintCode.fillColor4.setFill()
        bezier11Path.fill()
        PaintCode.strokeColor.setStroke()
        bezier11Path.lineWidth = 1
        bezier11Path.miterLimit = 4
        bezier11Path.lineCapStyle = .round
        bezier11Path.lineJoinStyle = .round
        bezier11Path.stroke()


        //// Bezier 12 Drawing
        let bezier12Path = NSBezierPath()
        bezier12Path.move(to: NSPoint(x: 34.67, y: 70.82))
        bezier12Path.line(to: NSPoint(x: 30.41, y: 65.12))
        bezier12Path.curve(to: NSPoint(x: 30.28, y: 64.77), controlPoint1: NSPoint(x: 30.33, y: 65.02), controlPoint2: NSPoint(x: 30.29, y: 64.9))
        bezier12Path.curve(to: NSPoint(x: 30.35, y: 64.41), controlPoint1: NSPoint(x: 30.27, y: 64.65), controlPoint2: NSPoint(x: 30.29, y: 64.52))
        bezier12Path.curve(to: NSPoint(x: 30.6, y: 64.14), controlPoint1: NSPoint(x: 30.4, y: 64.29), controlPoint2: NSPoint(x: 30.49, y: 64.2))
        bezier12Path.curve(to: NSPoint(x: 30.95, y: 64.04), controlPoint1: NSPoint(x: 30.7, y: 64.07), controlPoint2: NSPoint(x: 30.83, y: 64.04))
        bezier12Path.line(to: NSPoint(x: 37.96, y: 64.04))
        bezier12Path.line(to: NSPoint(x: 34.67, y: 70.82))
        bezier12Path.close()
        PaintCode.strokeColor.setStroke()
        bezier12Path.lineWidth = 1
        bezier12Path.miterLimit = 4
        bezier12Path.lineCapStyle = .round
        bezier12Path.lineJoinStyle = .round
        bezier12Path.stroke()


        //// Bezier 13 Drawing
        let bezier13Path = NSBezierPath()
        bezier13Path.move(to: NSPoint(x: 63.55, y: 43.15))
        bezier13Path.line(to: NSPoint(x: 63.55, y: 37.31))
        bezier13Path.curve(to: NSPoint(x: 63.67, y: 36.92), controlPoint1: NSPoint(x: 63.55, y: 37.17), controlPoint2: NSPoint(x: 63.59, y: 37.03))
        bezier13Path.curve(to: NSPoint(x: 63.99, y: 36.67), controlPoint1: NSPoint(x: 63.75, y: 36.8), controlPoint2: NSPoint(x: 63.86, y: 36.72))
        bezier13Path.curve(to: NSPoint(x: 64.4, y: 36.64), controlPoint1: NSPoint(x: 64.12, y: 36.62), controlPoint2: NSPoint(x: 64.26, y: 36.61))
        bezier13Path.curve(to: NSPoint(x: 64.74, y: 36.86), controlPoint1: NSPoint(x: 64.53, y: 36.68), controlPoint2: NSPoint(x: 64.65, y: 36.75))
        bezier13Path.line(to: NSPoint(x: 68.31, y: 40.96))
        bezier13Path.line(to: NSPoint(x: 63.55, y: 43.15))
        bezier13Path.close()
        PaintCode.fillColor4.setFill()
        bezier13Path.fill()
        PaintCode.strokeColor.setStroke()
        bezier13Path.lineWidth = 1
        bezier13Path.miterLimit = 4
        bezier13Path.lineCapStyle = .round
        bezier13Path.lineJoinStyle = .round
        bezier13Path.stroke()


        //// Bezier 14 Drawing
        let bezier14Path = NSBezierPath()
        bezier14Path.move(to: NSPoint(x: 57.79, y: 55.87))
        bezier14Path.line(to: NSPoint(x: 75.61, y: 64.63))
        bezier14Path.curve(to: NSPoint(x: 75.89, y: 64.91), controlPoint1: NSPoint(x: 75.73, y: 64.69), controlPoint2: NSPoint(x: 75.83, y: 64.79))
        bezier14Path.curve(to: NSPoint(x: 75.98, y: 65.3), controlPoint1: NSPoint(x: 75.96, y: 65.03), controlPoint2: NSPoint(x: 75.99, y: 65.16))
        bezier14Path.curve(to: NSPoint(x: 75.83, y: 65.67), controlPoint1: NSPoint(x: 75.96, y: 65.43), controlPoint2: NSPoint(x: 75.91, y: 65.56))
        bezier14Path.curve(to: NSPoint(x: 75.51, y: 65.9), controlPoint1: NSPoint(x: 75.75, y: 65.77), controlPoint2: NSPoint(x: 75.63, y: 65.85))
        bezier14Path.line(to: NSPoint(x: 65.09, y: 69.06))
        bezier14Path.line(to: NSPoint(x: 56.25, y: 58.07))
        bezier14Path.line(to: NSPoint(x: 57.79, y: 55.87))
        bezier14Path.close()
        PaintCode.strokeColor.setStroke()
        bezier14Path.lineWidth = 1
        bezier14Path.miterLimit = 4
        bezier14Path.lineCapStyle = .round
        bezier14Path.lineJoinStyle = .round
        bezier14Path.stroke()


        //// Bezier 15 Drawing
        let bezier15Path = NSBezierPath()
        bezier15Path.move(to: NSPoint(x: 71.65, y: 78.98))
        bezier15Path.curve(to: NSPoint(x: 72.02, y: 78.87), controlPoint1: NSPoint(x: 71.78, y: 78.98), controlPoint2: NSPoint(x: 71.91, y: 78.94))
        bezier15Path.curve(to: NSPoint(x: 72.27, y: 78.6), controlPoint1: NSPoint(x: 72.13, y: 78.81), controlPoint2: NSPoint(x: 72.21, y: 78.71))
        bezier15Path.curve(to: NSPoint(x: 72.33, y: 78.23), controlPoint1: NSPoint(x: 72.32, y: 78.48), controlPoint2: NSPoint(x: 72.34, y: 78.35))
        bezier15Path.curve(to: NSPoint(x: 72.19, y: 77.88), controlPoint1: NSPoint(x: 72.32, y: 78.1), controlPoint2: NSPoint(x: 72.27, y: 77.98))
        bezier15Path.line(to: NSPoint(x: 56.25, y: 58.07))
        bezier15Path.line(to: NSPoint(x: 50.09, y: 50.4))
        bezier15Path.line(to: NSPoint(x: 54.42, y: 78.98))
        bezier15Path.line(to: NSPoint(x: 71.65, y: 78.98))
        bezier15Path.close()
        PaintCode.strokeColor.setStroke()
        bezier15Path.lineWidth = 1
        bezier15Path.miterLimit = 4
        bezier15Path.lineCapStyle = .round
        bezier15Path.lineJoinStyle = .round
        bezier15Path.stroke()


        //// Bezier 16 Drawing
        let bezier16Path = NSBezierPath()
        bezier16Path.move(to: NSPoint(x: 34.67, y: 70.82))
        bezier16Path.line(to: NSPoint(x: 47.12, y: 70.82))
        bezier16Path.line(to: NSPoint(x: 39.19, y: 61.48))
        bezier16Path.line(to: NSPoint(x: 34.67, y: 70.82))
        bezier16Path.close()
        PaintCode.strokeColor.setStroke()
        bezier16Path.lineWidth = 1
        bezier16Path.miterLimit = 4
        bezier16Path.lineCapStyle = .round
        bezier16Path.lineJoinStyle = .round
        bezier16Path.stroke()


        //// Bezier 17 Drawing
        let bezier17Path = NSBezierPath()
        bezier17Path.move(to: NSPoint(x: 68.32, y: 40.94))
        bezier17Path.line(to: NSPoint(x: 49.27, y: 49.4))
        bezier17Path.line(to: NSPoint(x: 56.25, y: 58.07))
        bezier17Path.line(to: NSPoint(x: 68.32, y: 40.94))
        bezier17Path.close()
        PaintCode.strokeColor.setStroke()
        bezier17Path.lineWidth = 1
        bezier17Path.miterLimit = 4
        bezier17Path.lineCapStyle = .round
        bezier17Path.lineJoinStyle = .round
        bezier17Path.stroke()


        //// Bezier 18 Drawing
        let bezier18Path = NSBezierPath()
        bezier18Path.move(to: NSPoint(x: 54.39, y: 78.98))
        bezier18Path.line(to: NSPoint(x: 50.07, y: 50.4))
        bezier18Path.line(to: NSPoint(x: 49.27, y: 49.4))
        bezier18Path.line(to: NSPoint(x: 43.87, y: 51.81))
        bezier18Path.line(to: NSPoint(x: 39.19, y: 61.48))
        bezier18Path.line(to: NSPoint(x: 47.12, y: 70.82))
        bezier18Path.line(to: NSPoint(x: 54.06, y: 78.98))
        bezier18Path.line(to: NSPoint(x: 54.39, y: 78.98))
        bezier18Path.close()
        PaintCode.strokeColor.setStroke()
        bezier18Path.lineWidth = 1
        bezier18Path.miterLimit = 4
        bezier18Path.lineCapStyle = .round
        bezier18Path.lineJoinStyle = .round
        bezier18Path.stroke()


        //// Oval 2 Drawing
        NSGraphicsContext.saveGraphicsState()
        context.setAlpha(0.15)

        let oval2Path = NSBezierPath(ovalIn: NSRect(x: 44.25, y: 25.75, width: 25.8, height: 3.4))
        PaintCode.fillColor6.setFill()
        oval2Path.fill()

        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfOrigami: NSImage {
        if Cache.imageOfOrigami != nil {
            return Cache.imageOfOrigami!
        }

        Cache.imageOfOrigami = NSImage(size: NSSize(width: 110, height: 115), flipped: false) { _ in 
            PaintCode.drawOrigami()

            return true
        }

        return Cache.imageOfOrigami!
    }




    @objc(PaintCodeResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: NSRect, target: NSRect) -> NSRect {
            if rect == target || target == NSRect.zero {
                return rect
            }

            var scales = NSSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
